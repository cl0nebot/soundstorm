#!/bin/bash
#
# Run commands for the Soundstorm application within a Docker container.

case "$1" in
  # build containers and set up the database
  init)
    export RAILS_PORT="3$((RANDOM%1000))"
    echo "RAILS_PORT=$RAILS_PORT" > "$PWD"/.env
    PUMA_DEV="$HOME/.puma-dev"
    if [[ -d "$PUMA_DEV" ]]; then
      if [[ -x "$PUMA_DEV/soundstorm" ]]; then
        echo "$RAILS_PORT" > "$PUMA_DEV/soundstorm"
      fi
    fi
    docker-compose run web bin/rails tmp:clear log:clear
    ;;
  # view logs for a given service, default is "web"
  logs)
    if [ -z "$2" ]; then
      service="web"
    else
      service="$2"
    fi

    docker-compose logs -f "$service"
    ;;
  # start all containers
  start)
    docker-compose up -d

    if [[ -f "$PUMA_DEV/soundstorm" ]]; then
      echo "Soundstorm has started at https://soundstorm.test"
    else
      echo "Soundstorm has started at http://localhost.test:$RAILS_PORT"
    fi
    ;;
  # stop and remove running containers
  stop)
    docker-compose down
    echo "Soundstorm has shut down"
    ;;
  # restart the web container
  restart)
    docker-compose restart web
    echo "Soundstorm has restarted"
    ;;
  # build a production image of Soundstorm
  build)
    COMPOSE_FILE="docker-compose.yml:docker-compose.production.yml" \
      docker-compose build --build-arg RAILS_ENV=production web
    ;;
  # release the production image to Docker Hub
  release)
    soundstorm build && docker-compose push web
    ;;
  # run ECS commands
  production)
    COMPOSE_FILE="docker-compose.yml:docker-compose.production.yml" \
      ecs-cli compose "$*"
    ;;
  help|"")
    echo "Usage: bin/soundstorm [COMMAND]"
    echo
    echo "Commands:"
    echo "  init            Initialize your local environment to run Soundstorm"
    echo "  logs [SERVICE]  View logs for a given service. (default: web)"
    echo "  start           Start the application"
    echo "  stop            Stop the application"
    echo "  restart         Restart the web server"
    echo "  release         Publish a new version of Soundstorm"
    echo "  deploy          Deploy production services to AWS ECS"
    echo "  production      Run ECS commands on production"
    echo "  help            Show this message"
    echo
    echo "If a command is unknown, it is delegated to bin/rails on the web container"
    echo "To deploy to production, prefix commands with RAILS_ENV=production"
    ;;
  # delegate task commands to ./bin/rails
  *)
    docker-compose run web bin/rails "$*"
    ;;
esac
