#!/bin/bash
#
# Run commands for the Soundstorm application within a Docker container.

PUMA_DEV="$HOME/.puma-dev"

if [[ -z "$RAILS_ENV" ]]; then
  RAILS_ENV=development
fi

DOCKER_IMAGE_NAME="weathermen/soundstorm"

case "$1" in
  # build containers and set up the database. generate a puma-dev
  # configuration file if it does not exist and is in use
  init)
    if [ -d "$PUMA_DEV" ]; then
      RAILS_PORT="3$((RANDOM%1000))"
    else
      RAILS_PORT=3000
    fi

    if [ "$RAILS_ENV" == "development" ] && \
       [ -d "$PUMA_DEV" ] && \
       [ ! -f "$PUMA_DEV/soundstorm" ]; then

      echo "Generating soundstorm.test puma-dev configuration..."
      echo "$RAILS_PORT" > "$PUMA_DEV/soundstorm"
    fi

    echo "Initializing Soundstorm $RAILS_ENV environment..."
    export COMPOSE_FILE="docker-compose.yml:docker-compose.$RAILS_ENV.yml"
    SECRET_KEY_BASE=$(docker-compose run --rm web bin/rails tmp:clear log:clear db:setup secret | tail -n 1)

    if [ ! -f "$PWD/.env" ]; then
      echo "Generating .env configuration in local directory"
      echo "RAILS_PORT=$RAILS_PORT" > "$PWD"/.env
      echo "SECRET_KEY_BASE=$SECRET_KEY_BASE" >> "$PWD"/.env
    fi

    if [ ! -f "$PWD/.env.secrets" ]; then
      echo "Edit .env.secrets to configure production credentials"
      cp "$PWD/.env.secrets.example" "$PWD/.env.secrets"
    fi

    ;;
  # view logs for a given service, default is "web"
  logs)
    if [ -z "$2" ]; then
      service="web"
    else
      service="$2"
    fi

    COMPOSE_FILE="docker-compose.yml:docker-compose.$RAILS_ENV.yml" \
      docker-compose logs -f "$service"
    ;;
  # start all containers
  start)
    COMPOSE_FILE="docker-compose.yml:docker-compose.$RAILS_ENV.yml" \
      docker-compose up -d

    if [[ -f "$PUMA_DEV/soundstorm" ]]; then
      echo "Soundstorm has started at https://soundstorm.test"
    else
      echo "Soundstorm has started at http://localhost.test:$RAILS_PORT"
    fi
    ;;
  # stop and remove running containers
  stop)
    COMPOSE_FILE="docker-compose.yml:docker-compose.$RAILS_ENV.yml" \
      docker-compose down
    echo "Soundstorm has shut down"
    ;;
  # restart the web container
  restart)
    COMPOSE_FILE="docker-compose.yml:docker-compose.$RAILS_ENV.yml" \
      docker-compose restart web
    echo "Soundstorm has restarted"
    ;;
  # blow away all data related to soundstorm as well as its containers
  clean)
    docker volume rm soundstorm_postgresql
    ;;
  # build a production image of Soundstorm
  build)
    COMPOSE_FILE="docker-compose.yml:docker-compose.production.yml" \
      docker-compose build --build-arg RAILS_ENV=production web &&
      docker image tag "$DOCKER_IMAGE_NAME:latest" "$DOCKER_IMAGE_NAME:$(bin/soundstorm version)"
    ;;
  # release the production image(s) to Docker Hub
  release)
    docker image push "weathermen/soundstorm:$(soundstorm version)"
    docker image push "weathermen/soundstorm:latest"
  ;;
  # run ECS commands
  production)
    COMPOSE_FILE="docker-compose.yml:docker-compose.production.yml" \
      ecs-cli compose \
        --project-name soundstorm \
        "$*" \
        --cluster-config soundstorm
  ;;
  # deploy to ECS
  deploy)
    COMPOSE_FILE="docker-compose.yml:docker-compose.production.yml" \
      ecs-cli compose \
        --project-name soundstorm \
        up \
        --create-log-groups \
        --cluster-config soundstorm && \
      ecs-cli compose \
        --project-name soundstorm \
        run web bin/rails db:update assets:precompile \
        --cluster-config soundstorm

  ;;
  # print version
  version)
    ruby -r./lib/soundstorm/version.rb -e 'puts Soundstorm::VERSION'
  ;;
  help|"")
    echo "Usage: bin/soundstorm [COMMAND]"
    echo
    echo "Commands:"
    echo "  init            Initialize your local environment to run Soundstorm"
    echo "  logs [SERVICE]  View logs for a given service. (default: web)"
    echo "  start           Start the application"
    echo "  stop            Stop the application"
    echo "  restart         Restart the web server"
    echo "  release         Publish a new version of Soundstorm"
    echo "  deploy          Deploy production services to AWS ECS"
    echo "  production      Run ECS commands on production"
    echo "  help            Show this message"
    echo
    echo "If a command is unknown, it is delegated to bin/rails on the web container"
  ;;
  # delegate task commands to ./bin/rails, entrypoint command is not run
  *)
    COMPOSE_FILE="docker-compose.yml:docker-compose.development.yml" \
      docker-compose run --rm --entrypoint='' web "bin/rails" "$*"
  ;;
esac
