module PaperTrail
  decorate Version do
    decorated do
      after_create :broadcast

      delegate :actor, to: :user
      delegate :activity_id, :as_activity, to: :item

      scope :unpublished, -> { where(broadcasted_at: nil) }
    end

    def followers
      return [] if user.blank?
      user.followers(User)
    end

    def user
      return if whodunnit.blank?
      GlobalID::Locator.locate(whodunnit)
    end

    def upload?
      item.is_a?(Track) && event == 'create'
    end

    def verb
      return 'uploaded' if upload?
      "#{event}ed"
    end

    def type
      event.classify
    end

    def message
      ActivityPub::Message.new(
        id: activity_id,
        type: type,
        published: created_at,
        actor: actor,
        payload: as_activity
      )
    end

    def broadcasted?
      broadcasted_at.present?
    end

    def broadcast
      BroadcastMessageJob.perform_later(self) unless broadcasted?
    end
  end
end
